<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd"
      >
    <apikit:config name="api-config" raml="api.raml" consoleEnabled="true" consolePath="console" />
    <apikit:mapping-exception-strategy name="api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" />
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" />
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" />
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    <flow name="api-main" doc:name="api-main">
        <http:inbound-endpoint address="http://localhost:${http.port}/api" doc:name="HTTP"/>
        <apikit:router config-ref="api-config" />
        <exception-strategy ref="api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>


    <!-- get a list of the cookbook -->
    <flow name="get:/cookbook:api-config" doc:name="get:/cookbook:api-config">

        <object-to-string-transformer />

        <!-- two seconds of timeout is enough to tell something went wrong -->
        <request-reply timeout="2000">
            <jms:outbound-endpoint queue="listCookbook" />
            <jms:inbound-endpoint queue="listCookbookResponse" />
        </request-reply>

        <byte-array-to-object-transformer />
        <!-- we need to add some shape to this -->
        <set-payload value="#[['recipes': payload]]" />

    </flow>

    <!-- check for the status of a given job -->
    <flow name="get:/jobs/{jobId}:api-config" doc:name="get:/jobs/{jobId}:api-config">
        <!-- place the job id in the payload -->
        <set-payload value="#[jobId]" />

        <!-- two seconds of timeout is enough to tell something went wrong -->
        <request-reply timeout="2000">
            <jms:outbound-endpoint queue="jobInfo"/>
            <jms:inbound-endpoint queue="jobInfoResponse" />
        </request-reply>

        <byte-array-to-object-transformer />

        <!-- we need to represent what comes from the backend -->
        <choice>
            <when expression="#[payload.isEmpty()]">
                <set-payload value="#[['jobid': jobId, 'status': 'not found']]" />
            </when>
            <otherwise>
                <!-- the first and only element -->
                <set-payload value="#[payload[0]]" />
            </otherwise>
        </choice>

    </flow>



    <flow name="post:/cookbook:api-config" doc:name="post:/cookbook:api-config">
        <logger level="INFO" message="Requested to insert #[payload]" />
        <set-property propertyName="jobId" value="#[message.id]" />

        <!-- the backend does not know anything about json -->
        <json:json-to-object-transformer returnClass="java.util.Map" />

        <jms:outbound-endpoint queue="newRecipes" />
        <set-payload value="#[['jobid': message.id]]" />
    </flow>
</mule>
